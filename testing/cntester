#!/usr/bin/python3

from argparse import ArgumentParser
import cn_data_manage as di
import cn_math as m
import cn_multiprocs as mp
import cn_graphics as g
from sys import exit

# Definisci il parser
parser = ArgumentParser(description="Python script to test noise\
				     generation capabilities of\
				     tester.x executable")


# Aggiungi un argomento per specificare il nome del data file
parser.add_argument("datafile", help = "a plain text file containing some\
				samples of equal cardinality")

# Aggiungi un argomento per specificare la cardinalità dei campioni
parser.add_argument("samp_card", type=m.check_positive_int,\
		    help = "a positive integer representing the\
		    cardinality of samples in datafile")

# Aggiungi un argomento per specificare il numero di campioni

# che ogni CPU processa in media per ogni iterazione del loop principale
parser.add_argument('samp_per_CPU', nargs='?', default=1,\
		    type=m.check_positive_int,\
		    help = "a positive integer representing the medium\
		    number of samples per CPU per main loop iteration\
		    (default = 1)")
parser.add_argument('-V', '--version', action='version', version='%(prog)s 0.3')

# Aggiungi un argomento per abilitare la grafica
parser.add_argument('-g', '--graphics', action='store_true',\
		    help = "Enable graphics (Produce png images of noise graph\
		    and power spectrum)")

# Aggiungi un argomento lanciare il programma in modalità silenziosa
parser.add_argument('-q', '--quiet', action='store_true',\
		    help = "Run quietly, producing a parsable output")

# Aggiungi flag di verbosità
parser.add_argument('-v', '--verbose', action='store_true',\
		    help = "Produce more verbose output (for debugging purpose.\
		    Ineffective when present with --quiet)")



# Parsa la linea di comando
args = parser.parse_args()


# Assegna gli argomenti selezionati dalla linea di comando
# a delle variabili (per maggiore comodità).
data_file = args.datafile
sample_cardinality = args.samp_card
samples_per_CPU = args.samp_per_CPU
graphics = args.graphics
quiet = args.quiet
verbose = args.verbose


# Calcola il numero complessivo dei dati
# contando le linee del data file
data_number = di.get_lines_number(data_file)
# Calcola dinamicamente il numero di dati analizzate
# ad ogni iterazione del loop principale, basandosi
# sul numero di CPU della macchina
data_per_iter = mp.get_data_per_iter(samples_per_CPU, sample_cardinality)
# Calcola il numero di iterazioni del loop principale
main_loop_iter = mp.get_main_loop_iter(data_file, data_number, data_per_iter)


# Inizializza la lista dei valori di aspettazione e
# delle deviazioni standard
averages_list = []
std_devs_list = []
alphas_list = []


if not quiet:
	# Printa il banner di presentazione
	print("""#######################################
# cntester: Colored Noise Tester v0.3 #
# by Matteo Savatteri                 #
#######################################""")


	# Segnala se la grafica è abilitata o altrimenti
	if graphics:
		print("Graphics: Enabled")
	else:
		print("Graphics: Disabled")


	if verbose:
		print()
		print("Current Settings:")
		print("Data File:", data_file)
		print("Sample Cardinality:", sample_cardinality)
		print("Sample per CPU:", samples_per_CPU)
		print("Graphics:", graphics)
		print("Quiet:", quiet)
		print("Verbose:", verbose)


	print()
	print("Thinking hard...")


# Avvia il loop principale
for index in range(0,main_loop_iter):

	# Calcola l'inizio e la fine (intese come linee nel data file)
	# del blocco di dati da analizzare nella presente iterazione
	start = index*data_per_iter
	# Se il numero della linea iniziale più la dimensione del blocco
	# supera il numero di linee del data file, poni la fine
	# uguale a quest'ultimo
	if start + data_per_iter > data_number:
		end = data_number
	else:
		end = start + data_per_iter


	if not quiet and verbose:
		print("Loop number", index+1, "- Loading", end-start, "data in CPUs and processing...")


	# Genera la lista organizzata dei dati, per questa iterazione:
	# una lista di liste, dove ogni sottolista corrisponde ad un
	# campione di dati differente
	samples_list = di.get_complex_data(data_file,start,end,\
	sample_cardinality)


	# Se la grafica è abilitata esporta le immagini png dei grafici
	# del rumore colorato e del suo spettro di potenza (primo campione)
	if index == 0 and graphics:
		g.plot_cn(samples_list[0])

		g.plot_cn_ps(m.list_power_spectrum(samples_list[0]))



	# Calcola la lista dei valori di aspettazione dei campioni
	# per questa iterazione
	iter_averages_list = mp.multi_average(samples_list)
	# Appendi alla lista dei valori di aspettazione tutti i valori
	# di aspettazione calcolati in questa iterazione
	averages_list.extend(iter_averages_list)

	# Calcola la lista delle deviazioni standard dei campioni
	# per questa iterazione
	iter_std_devs_list = mp.multi_std_dev(samples_list,iter_averages_list)
	# Appendi alla lista delle deviazioni standard tutti le deviazioni
	# standard calcolate in questa iterazione
	std_devs_list.extend(iter_std_devs_list)

	# Calcola la lista dei parametri alpha dei campioni
	# per questa iterazione
	iter_alphas_list = mp.multi_get_alpha(samples_list)
	# Appendi alla lista dei parametri alpha tutti i parametri
	# alpha calcolati in questa iterazione
	alphas_list.extend(iter_alphas_list)


if not quiet and verbose:
	print()
	print("Calculating and printing summary...")


# Uno spazio per rendere il tutto più ordinato
if not quiet:
	print()


# Calcola il valore di aspettazione del  rumore
# dalla lista dei valori di apettazione di tutti i
# campioni
noise_average = m.list_average(averages_list)

# Stampa a standard output il valore di aspettazione del
# rumore
if quiet:
	print(noise_average)
else:
	print("Noise Expectation Value:",noise_average)

# Calcola e stampa a standard output la deviazione standard
# del valore di aspettazione del rumore

noise_average_std = m.list_std_dev(averages_list,noise_average)

if quiet:
	print(noise_average_std)
else:
	print("Noise Expectation Value Std. Deviation:", noise_average_std)


# Calcola la deviazione standard del rumore
# dalla lista delle deviaioni standard di tutti i
# campioni
noise_std_dev = m.list_average(std_devs_list)

# Stampa a standard output la deviazione standard del
# rumore
if quiet:
	print(noise_std_dev)
else:
	print("Noise Std. Deviation:", noise_std_dev)

# Calcola e stampa a standard output la deviazione standard
# della deviazione standard del rumore.
noise_std_std = m.list_std_dev(std_devs_list,noise_std_dev)

if quiet:
	print(noise_std_std)
else:
	print("Noise Std. Deviation Std. Deviation:", noise_std_std)


# Calcola il parametro alpha del rumore
# dalla lista dei parametri alpha di tutti i
# campioni
noise_alpha = m.list_average(alphas_list)

# Stampa a standard output il parametro alpha del
# rumore
if quiet:
	print(noise_alpha)
else:
	print("Noise Alpha Parameter:", noise_alpha)

# Calcola e stampa a standard output la deviazione standard
# del parametro alpha del rumore.
noise_alpha_std = m.list_std_dev(alphas_list,noise_alpha)

if quiet:
	print(noise_alpha_std)
else:
	print("Noise Alpha Parameter Std. Deviation:", noise_alpha_std)


# Indica all'utente come son state salvate le immagini
if not quiet and graphics:
	print("""
(Colored noise plot image saved as 'cn_plot.png'
 Colored noise power spectrum plot image saved as 'cn_ps_plot.png')""")



# Thanks for playing
if not quiet:

	print("""
Thanks for playing, see you!""")













# Esci con grazia
exit()
